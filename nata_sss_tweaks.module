<?php

/**
 * @file
 * Render an administrative menu as a dropdown menu at the top of the window.
 */


/**
 * Implements hook_node_view().
 */
function nata_sss_tweaks_node_view($node, $view_mode, $langcode) {
  $nids = _nata_sss_tweaks_get_webform_nids();

  if (!in_array($node->nid, $nids)) {
    return;
  }

  drupal_add_css(drupal_get_path('module', 'nata_sss_tweaks') . '/css/nata_sss_tweaks.css');


  $nid_step = array_search($node->nid, $nids);
  switch ($nid_step) {
    case 'step_1':
      $setting = array(
        'nata_sss_tweaks' => array(
          'onpage_validate_yes_formkeys' => _nata_sss_tweaks_get_minimumrequirement_onpage_validation_formkeys($node->nid),
        )
      );
      drupal_add_js($setting, 'setting');
      drupal_add_js(drupal_get_path('module', 'nata_sss_tweaks') . '/js/nata_sss_tweaks_webform_step1.js');
      break;
    default:
      $setting = array(
        'nata_sss_tweaks' => array(
          'step' => $nid_step,
        )
      );
      drupal_add_js($setting, 'setting');
      drupal_add_js(drupal_get_path('module', 'nata_sss_tweaks') . '/js/nata_sss_tweaks_webform.js');
      break;
  }

}

function _nata_sss_tweaks_get_minimumrequirement_onpage_validation_formkeys($nid) {
  $ret = array();
  $rules = webform_validation_get_node_rules($nid);
  foreach (webform_validation_get_node_rules($nid) as $rule) {
    if (strpos($rule['error_message'], 'Minimum requirement not met:') === 0) {
      foreach ($rule['components'] as $component) {
        $ret[] = $component['form_key'];
      }
    }
  }
  return $ret;
}

function nata_sss_tweaks_civicrm_buildAmount($a = NULL, $b = NULL) {
  dsm(func_get_args(), __FUNCTION__);
}

function nata_sss_tweaks_form_alter(&$form, &$form_state, $form_id) {
//  if ($form_id == 'webform_client_form_5') {
//    $form['submitted']['my_form_component'] = array(
//      '#type' => 'markup',
//      '#value' => 'A spurious text title',
//    );
//    dsm($form, "$form_id form");
//
////    dsm($form_state['webform'], "$form_id state");
//  }
  
  $nids = _nata_sss_tweaks_get_webform_nids();
  if ($form_id == 'webform_client_form_' . $nids['step_1']) {
    array_unshift($form['#submit'], 'nata_sss_tweaks_form_webform_client_form_step1_submit');
  }
  elseif ($form_id == 'webform_client_form_' . $nids['step_3']) {
    array_unshift($form['#submit'], 'nata_sss_tweaks_form_webform_client_form_step3_submit');
  }

}

function nata_sss_tweaks_form_webform_client_form_step1_submit($form, &$form_state) {
  if (array_key_exists('civicrm_1_case_1_cg14_custom_84', $form_state['values']['submitted'])) {
    _nata_sss_flatten_webform_values($form_state['values']['submitted']['sss_qualifications'], $values);
    // If the only value submitted was 1, put them in the first team.
    if (array_values(array_unique($values)) == array(1)) {
      $form_state['values']['submitted']['civicrm_1_case_1_cg14_custom_84'] = 'first';
    }
    else {
    // Otherwise, second team.
      $form_state['values']['submitted']['civicrm_1_case_1_cg14_custom_84'] = 'second';
    }
  }
}

function nata_sss_tweaks_form_webform_client_form_step3_submit($form, &$form_state) {
  // Copy "team" setting from case to membership.
  if (array_key_exists('civicrm_1_case_1_cg14_custom_84', $form_state['values']['submitted'])) {
    $form_state['values']['submitted']['civicrm_2_membership_1_membership_custom_83'] = $form_state['values']['submitted']['civicrm_1_case_1_cg14_custom_84'];
  }
}

function _nata_sss_tweaks_get_webform_nids() {
  // TODO: Remove hard-coded node IDs and add a UI configuration to track these.
  return array(
    'step_1' => 5,
    'step_2' => 7,
    'step_3' => 8,
    'step_4' => 10,
  );
}

/**
 * Recursively extract all non-array values from a given array
 *
 * @param Array $values The array to extract from.
 * @param Array $ret (Reference) The flattened array.
 */
function _nata_sss_flatten_webform_values($values, &$ret = array()) {
  foreach ($values as $key => $value) {
    if (is_array($value)) {
      _nata_sss_flatten_webform_values($value, $ret);
    }
    else {
      $ret[$key] = $value;
    }
  }
}

function nata_sss_tweaks_civicrm_dashboard( $contactID, &$contentPlacement ) {
  CRM_Core_Resources::singleton()->addStyle(<<<EOT
    #civicrm-dashboard .column {
      width: 100% !important;
      margin: 0 !important;
      min-height: 0 !important;
      height: auto !important;
      padding: 0 !important;
    }
EOT
);
}
